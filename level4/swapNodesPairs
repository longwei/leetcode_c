//Given a linked list, swap every two adjacent nodes and return its head.

//For example,
//Given 1->2->3->4, you should return the list as 2->1->4->3.

//Your algorithm should use only constant space. You may not modify the values in the list,
//only nodes itself can be changed.

ListNode *swapPairs(ListNode *head) {
    if(head == nullptr || head->next == nullptr) return head;
    ListNode* r1 = head;
    ListNode* r2 = head->next;
    while(r1 && r2){
        int tmp = r1->val;
        r1->val = r2->val;
        r2->val = tmp;
        if(r2->next == nullptr) break;
        r1 = r2->next;
        r2 = r2->next->next;
    }
    return head;
}

ListNode *swapPairsInSpace(ListNode *head) {
    if(head == nullptr || head->next == nullptr) return head;
    ListNode dummy(0);
    ListNode* prev = &dummy;
    ListNode* r1 = head;
    ListNode* r2 = head->next;
    prev->next = r1;
    while(r1 && r2){
        //ptr swap
        r1->next = r2->next;
        prev->next = r2;
        r2->next = r1;
        if(r1->next == nullptr) break;
        prev = r1;
        r1 = r1->next;
        r2 = r1->next;
    }
    return dummy.next;
}